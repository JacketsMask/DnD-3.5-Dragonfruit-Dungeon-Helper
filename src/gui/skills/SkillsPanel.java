package gui.skills;

import character.CharacterSkills;
import character.IntegerVerifier;
import character.Player;
import diceroller.DiceRoller;
import enumerations.Skill;
import main.SaveStateReader;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import main.DataRetrievalManager;
import main.FilteredTableModel;

/**
 *
 * @author Japhez
 */
public class SkillsPanel extends javax.swing.JPanel implements SaveStateReader {

    private Player player;
    private CharacterSkills skills;
    private FilteredTableModel skillTableModel;

    /**
     * Creates new form SkillsPanel
     */
    public SkillsPanel(Player player) {
        this.player = player;
        this.skills = player.getSkills();
        initComponents();
        //Create the model for the table data
        skillTableModel = new FilteredTableModel(skillFilterTextField, 4,
                new String[]{"Skill", "Rank", "Misc Modifier", "Total"});
        //Set the table's model
        int threeSeventyFour = 374;
        skillTable.setModel(skillTableModel);
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);
        skillTable.getColumnModel().getColumn(0).setPreferredWidth((int) (threeSeventyFour * .40));
        skillTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
        skillTable.getColumnModel().getColumn(1).setPreferredWidth((int) (threeSeventyFour * .20));
        skillTable.getColumnModel().getColumn(2).setCellRenderer(renderer);
        skillTable.getColumnModel().getColumn(2).setPreferredWidth((int) (threeSeventyFour * .20));
        skillTable.getColumnModel().getColumn(3).setCellRenderer(renderer);
        skillTable.getColumnModel().getColumn(3).setPreferredWidth((int) (threeSeventyFour * .20));
        //Set max selected rows
        skillTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        skillTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                //No selection made
                if (skillTable.getSelectedRow() == -1) {
                    rollButton.setEnabled(false);
                    changeSkillValuesButton.setEnabled(false);
                } else {
                    rollButton.setEnabled(true);
                    changeSkillValuesButton.setEnabled(true);
                }
            }
        });
        DataRetrievalManager.linkReader(this, skills);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        skillFilterTextField = new javax.swing.JTextField();
        rollButton = new javax.swing.JButton();
        skillModifierTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        skillTable = new javax.swing.JTable();
        changeSkillValuesButton = new javax.swing.JButton();

        rollButton.setText("Roll Selected Skill");
        rollButton.setEnabled(false);
        rollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollButtonActionPerformed(evt);
            }
        });

        skillModifierTextField.setText("0");
        skillModifierTextField.setToolTipText("");
        skillModifierTextField.setInputVerifier(new IntegerVerifier(-99,99));

        jLabel1.setText("Modifier:");

        jLabel2.setText("Skill filter:");

        skillTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Skill", "Rank", "Modifier", "Total"
            }
        ));
        tableScrollPane.setViewportView(skillTable);

        changeSkillValuesButton.setText("Change skill values");
        changeSkillValuesButton.setEnabled(false);
        changeSkillValuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeSkillValuesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(skillModifierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rollButton, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(changeSkillValuesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(skillFilterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(skillFilterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(skillModifierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(rollButton)
                        .addGap(18, 18, 18)
                        .addComponent(changeSkillValuesButton)
                        .addGap(0, 109, Short.MAX_VALUE))
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButtonActionPerformed
        int selectedRow = skillTable.getSelectedRow();
        ArrayList<Object> row = skillTableModel.getRow(selectedRow);
        Skill skill = (Skill) row.get(0);
        int characterValue = (int) row.get(1);
        int customModifier = Integer.parseInt(skillModifierTextField.getText());
        int roll = DiceRoller.rollD20();
        int ASModifier = skills.getKeyModifierValue(skill);
        System.out.println("Character: " + characterValue);
        System.out.println("TextField Modifier: " + customModifier);
        System.out.println("Roll: " + roll);
        System.out.println("AS Modifier: " + ASModifier);
        System.out.println(skill + " roll: " + (characterValue + customModifier + roll + ASModifier));
    }//GEN-LAST:event_rollButtonActionPerformed

    private void changeSkillValuesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeSkillValuesButtonActionPerformed
        //Get currently selected skill
        int selectedRow = skillTable.getSelectedRow();
        ArrayList<Object> row = skillTableModel.getRow(selectedRow);
        Skill skill = (Skill) row.get(0);
        SkillAdjustmentDialog skillAdjustmentDialog = new SkillAdjustmentDialog(this, player, skill);
        skillAdjustmentDialog.setVisible(true);
    }//GEN-LAST:event_changeSkillValuesButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeSkillValuesButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton rollButton;
    private javax.swing.JTextField skillFilterTextField;
    private javax.swing.JTextField skillModifierTextField;
    private javax.swing.JTable skillTable;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void loadInfo() {
        if (DataRetrievalManager.isDataChanged(skills, this)) {
            skillTableModel.clearRows();
            //Add all skills and player values to the table
            for (Skill s : Skill.getAllSkills()) {
                int ranks = skills.getSkillRank(s);
                int keyModifier = skills.getKeyModifierValue(s);
                skillTableModel.addRow(new Object[]{s, ranks, keyModifier, (ranks + keyModifier)});
                skillTableModel.fireTableDataChanged();
            }
            DataRetrievalManager.dataRead(skills, this);
        }
    }
}
