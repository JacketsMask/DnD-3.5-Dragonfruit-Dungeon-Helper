/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.character.selection;

import character.Player;
import file.manipulation.FileManipulator;
import gui.basicinfo.BasicInfoDialog;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Japhez
 */
public class CharacterSelectionDialog extends javax.swing.JDialog {

    private DefaultListModel model;
    private Player player;

    /**
     * Creates new form CharacterSelectionDialog
     */
    public CharacterSelectionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        model = new DefaultListModel();
        characterList.setModel(model);
        populateList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        characterButtonGroup = new javax.swing.ButtonGroup();
        characterSelectionPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        characterList = new javax.swing.JList();
        choiceSelectionPanel = new javax.swing.JPanel();
        loadButton = new javax.swing.JButton();
        createNewCharacterButton = new javax.swing.JButton();
        deleteCharacterButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Character Selection");
        setLocationByPlatform(true);

        jLabel1.setText("Select a character:");

        jScrollPane1.setViewportView(characterList);

        javax.swing.GroupLayout characterSelectionPanelLayout = new javax.swing.GroupLayout(characterSelectionPanel);
        characterSelectionPanel.setLayout(characterSelectionPanelLayout);
        characterSelectionPanelLayout.setHorizontalGroup(
            characterSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(characterSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(characterSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        characterSelectionPanelLayout.setVerticalGroup(
            characterSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(characterSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        loadButton.setText("Load Character");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        createNewCharacterButton.setText("Create New Character");
        createNewCharacterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewCharacterButtonActionPerformed(evt);
            }
        });

        deleteCharacterButton.setText("Delete Character");

        javax.swing.GroupLayout choiceSelectionPanelLayout = new javax.swing.GroupLayout(choiceSelectionPanel);
        choiceSelectionPanel.setLayout(choiceSelectionPanelLayout);
        choiceSelectionPanelLayout.setHorizontalGroup(
            choiceSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choiceSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(choiceSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(createNewCharacterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteCharacterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        choiceSelectionPanelLayout.setVerticalGroup(
            choiceSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choiceSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadButton)
                .addGap(18, 18, 18)
                .addComponent(createNewCharacterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addComponent(deleteCharacterButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(characterSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(choiceSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(choiceSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(characterSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        String characterName = (String) characterList.getSelectedValue();
        if (characterName == null) {
            return;
        }
        player = FileManipulator.readCharacterFromFile(characterName);
        this.setVisible(false);
    }//GEN-LAST:event_loadButtonActionPerformed

    private void createNewCharacterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewCharacterButtonActionPerformed
        Player newPlayer = new Player();
        this.player = newPlayer;
        BasicInfoDialog basicInfoDialog = new BasicInfoDialog(true, player);
        this.setModal(false);
        basicInfoDialog.setModal(true);
        basicInfoDialog.setVisible(true);
        FileManipulator.writeCharacterToFile(player);
        System.out.println("repopulating list");
        populateList();
        this.setModal(true);
    }//GEN-LAST:event_createNewCharacterButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(CharacterSelectionDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                CharacterSelectionDialog dialog = new CharacterSelectionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup characterButtonGroup;
    private javax.swing.JList characterList;
    private javax.swing.JPanel characterSelectionPanel;
    private javax.swing.JPanel choiceSelectionPanel;
    private javax.swing.JButton createNewCharacterButton;
    private javax.swing.JButton deleteCharacterButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Populates the character list by retrieving a list of characters on file,
     * adds each one as a radio button, and groups the buttons together.
     */
    private void populateList() {
        model.clear();
        String[] savedCharacters = FileManipulator.getSavedCharacters();
        if (savedCharacters.length > 0) {
            //Add each character to the list
            for (String s : savedCharacters) {
                model.addElement(s);
            }
        } else {
            player = new Player();
        }
    }

    public Player getPlayer() {
        return player;
    }
}
