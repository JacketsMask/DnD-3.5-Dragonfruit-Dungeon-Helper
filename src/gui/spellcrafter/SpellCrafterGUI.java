/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.spellcrafter;

import character.IntegerVerifier;
import character.Spell;
import character.Spell.School;
import file.manipulation.FileManipulator;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Japhez
 */
public class SpellCrafterGUI extends javax.swing.JFrame
{

    private DefaultListModel<ClassAvailability> classAvailabilityListModel;

    /**
     * Creates new form SpellCrafterGUI
     */
    public SpellCrafterGUI()
    {
        //Make sure the file directory is established
        FileManipulator.verifiyFileHierarchy();
        classAvailabilityListModel = new DefaultListModel<>();
        initComponents();
        initSchoolComboBox();
        classAvailabilityJList.setModel(classAvailabilityListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        schoolComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        verbalCheckBox = new javax.swing.JCheckBox();
        somaticCheckBox = new javax.swing.JCheckBox();
        focusCheckBox = new javax.swing.JCheckBox();
        xpCheckBox = new javax.swing.JCheckBox();
        xpTextField = new javax.swing.JTextField();
        gpCheckBox = new javax.swing.JCheckBox();
        gpTextField = new javax.swing.JTextField();
        removeSelectedClassButton = new javax.swing.JButton();
        addNewClassButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        classAvailabilityJList = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        loadPreexistingSpellButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        castingTimeTextField = new javax.swing.JTextField();
        targetTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        durationTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        savingThrowTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        resistanceTextField = new javax.swing.JTextField();
        saveSpellButton = new javax.swing.JButton();
        resetSpellInfoButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        numberOfDiceTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        numberOfSidesTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Spell Crafter 0.0");
        setLocationByPlatform(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Spell name:");

        jLabel2.setText("Spell school:");

        schoolComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Required components:");

        verbalCheckBox.setText("Verbal");

        somaticCheckBox.setText("Somatic");

        focusCheckBox.setText("Focus");

        xpCheckBox.setText("XP");
        xpCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xpCheckBoxActionPerformed(evt);
            }
        });

        xpTextField.setEnabled(false);
        xpTextField.setInputVerifier(new IntegerVerifier(0,100000));

        gpCheckBox.setText("GP");
        gpCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpCheckBoxActionPerformed(evt);
            }
        });

        gpTextField.setEnabled(false);
        gpTextField.setInputVerifier(new IntegerVerifier(0,100000));

        removeSelectedClassButton.setText("Remove selected class");

        addNewClassButton.setText("Add new class");
        addNewClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewClassButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(classAvailabilityJList);

        jLabel4.setText("Class Availability:");

        loadPreexistingSpellButton.setText("Load Existing Spell");
        loadPreexistingSpellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPreexistingSpellButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Reference:");

        jLabel16.setText("Page:");

        jTextField2.setColumns(5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(verbalCheckBox)
                            .addGap(8, 8, 8)
                            .addComponent(xpCheckBox)
                            .addGap(4, 4, 4)
                            .addComponent(xpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel15)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(schoolComboBox, 0, 117, Short.MAX_VALUE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField1)
                                .addComponent(nameTextField))))
                    .addComponent(focusCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(somaticCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gpCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeSelectedClassButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addNewClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(loadPreexistingSpellButton)
                    .addComponent(jLabel16))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(loadPreexistingSpellButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(schoolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verbalCheckBox)
                    .addComponent(xpCheckBox)
                    .addComponent(xpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(somaticCheckBox)
                    .addComponent(gpCheckBox)
                    .addComponent(gpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(focusCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addNewClassButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(removeSelectedClassButton)
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Spell description:");

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(descriptionTextArea);

        jLabel6.setText("Casting time:");

        jLabel7.setText("Target:");

        jLabel8.setText("Duration:");

        jLabel9.setText("Saving throw:");

        jLabel10.setText("Spell resistance:");

        saveSpellButton.setText("Save spell");
        saveSpellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSpellButtonActionPerformed(evt);
            }
        });

        resetSpellInfoButton.setText("Reset spell info");
        resetSpellInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSpellInfoButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Base roll without modifiers:");

        numberOfDiceTextField.setText("0");
        numberOfDiceTextField.setInputVerifier(new IntegerVerifier(1,100));

        jLabel13.setText("Number of dice:");

        jLabel14.setText("Number of sides:");

        numberOfSidesTextField.setText("0");
        numberOfSidesTextField.setInputVerifier(new IntegerVerifier(1,100));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(saveSpellButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resetSpellInfoButton))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addGap(33, 33, 33))
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGap(18, 18, 18)))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(resistanceTextField)
                                .addComponent(savingThrowTextField)
                                .addComponent(durationTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(castingTimeTextField)
                                .addComponent(targetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel14)
                                .addComponent(jLabel13))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(numberOfSidesTextField)
                                .addComponent(numberOfDiceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(castingTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(durationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savingThrowTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resistanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(numberOfDiceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(numberOfSidesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveSpellButton)
                    .addComponent(resetSpellInfoButton))
                .addContainerGap())
        );

        jLabel12.setText("<html>Fill in whatever information about the spell that you'd like.<br>  I recommend at least filling in the spell name and description, but only the spell name is strictly necessary.</html>");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void xpCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_xpCheckBoxActionPerformed
    {//GEN-HEADEREND:event_xpCheckBoxActionPerformed
        if (xpCheckBox.isSelected())
        {
            xpTextField.setEnabled(true);
        } else
        {
            xpTextField.setEnabled(false);
        }
    }//GEN-LAST:event_xpCheckBoxActionPerformed

    private void gpCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_gpCheckBoxActionPerformed
    {//GEN-HEADEREND:event_gpCheckBoxActionPerformed
        if (gpCheckBox.isSelected())
        {
            gpTextField.setEnabled(true);
        } else
        {
            gpTextField.setEnabled(false);
        }
    }//GEN-LAST:event_gpCheckBoxActionPerformed

    private void addNewClassButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addNewClassButtonActionPerformed
    {//GEN-HEADEREND:event_addNewClassButtonActionPerformed
        String showInputDialog = JOptionPane.showInputDialog("Please enter the class name followed by a space and then the level usable.", "[Example: Bard 1]");
        Scanner sc = new Scanner(showInputDialog);
        String className = null;
        int classLevel = 0;
        try
        {
            className = sc.next();
            classLevel = sc.nextInt();
        } catch (Exception e)
        {
            System.out.println(className);
            System.out.println(classLevel);
            System.out.println("Invalid input.");
            return;
        }
        classAvailabilityListModel.addElement(new ClassAvailability(className, classLevel));
        setVisible(true);
    }//GEN-LAST:event_addNewClassButtonActionPerformed

    private void saveSpellButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveSpellButtonActionPerformed
    {//GEN-HEADEREND:event_saveSpellButtonActionPerformed
        //Don't allow unnamed spells
        if (nameTextField.getText().equals(""))
        {
            return;
        }
        String name = nameTextField.getText();
        Spell newSpell = new Spell(name);
        newSpell.setDescription(descriptionTextArea.getText());
        newSpell.setSchool((School) schoolComboBox.getSelectedItem());
        HashMap<String, Integer> classesAndLevels = new HashMap<>();
        //Add each item from the model into the spell HashMap
        for (int i = 0; i < classAvailabilityListModel.size(); i++)
        {
            ClassAvailability avail = (ClassAvailability) classAvailabilityListModel.getElementAt(i);
            String className = avail.getClassName();
            int classLevel = avail.getClassLevel();
            classesAndLevels.put(className, classLevel);
        }
        newSpell.setClassAvailability(classesAndLevels);
        newSpell.setVerbal(verbalCheckBox.isSelected());
        newSpell.setSomatic(somaticCheckBox.isSelected());
        newSpell.setFocus(focusCheckBox.isSelected());
        newSpell.setCastingTime(castingTimeTextField.getText());
        newSpell.setTarget(targetTextField.getText());
        newSpell.setDuration(durationTextField.getText());
        newSpell.setSavingThrow(savingThrowTextField.getText());
        newSpell.setSpellResistance(resistanceTextField.getText());
        if (xpCheckBox.isSelected())
        {
            newSpell.setExperienceCost(Integer.parseInt(xpTextField.getText()));
        } else
        {
            newSpell.setExperienceCost(0);
        }
        if (gpCheckBox.isSelected())
        {
            newSpell.setGoldCost((Integer.parseInt(gpTextField.getText())));
        } else
        {
            newSpell.setGoldCost(0);
        }
        //Get dice roll information
        newSpell.setDiceNumber(Integer.parseInt(numberOfDiceTextField.getText()));
        newSpell.setDiceSides(Integer.parseInt(numberOfSidesTextField.getText()));
        FileManipulator.writeSpell(newSpell);
        resetInputFields();
    }//GEN-LAST:event_saveSpellButtonActionPerformed

    private void resetSpellInfoButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetSpellInfoButtonActionPerformed
    {//GEN-HEADEREND:event_resetSpellInfoButtonActionPerformed
        resetInputFields();
    }//GEN-LAST:event_resetSpellInfoButtonActionPerformed

    private void loadPreexistingSpellButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadPreexistingSpellButtonActionPerformed
    {//GEN-HEADEREND:event_loadPreexistingSpellButtonActionPerformed
        //Allow the user to select a spell
        Spell spell = FileManipulator.userSelectSpell();
        if (spell != null)
        {
            loadSpellInformation(spell);
        }
    }//GEN-LAST:event_loadPreexistingSpellButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(SpellCrafterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            @Override
            public void run()
            {
                new SpellCrafterGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewClassButton;
    private javax.swing.JTextField castingTimeTextField;
    private javax.swing.JList classAvailabilityJList;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JTextField durationTextField;
    private javax.swing.JCheckBox focusCheckBox;
    private javax.swing.JCheckBox gpCheckBox;
    private javax.swing.JTextField gpTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton loadPreexistingSpellButton;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField numberOfDiceTextField;
    private javax.swing.JTextField numberOfSidesTextField;
    private javax.swing.JButton removeSelectedClassButton;
    private javax.swing.JButton resetSpellInfoButton;
    private javax.swing.JTextField resistanceTextField;
    private javax.swing.JButton saveSpellButton;
    private javax.swing.JTextField savingThrowTextField;
    private javax.swing.JComboBox schoolComboBox;
    private javax.swing.JCheckBox somaticCheckBox;
    private javax.swing.JTextField targetTextField;
    private javax.swing.JCheckBox verbalCheckBox;
    private javax.swing.JCheckBox xpCheckBox;
    private javax.swing.JTextField xpTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * Fill the school combo box with all currently known schools.
     */
    private void initSchoolComboBox()
    {
        schoolComboBox.removeAllItems();
        School[] schools = Spell.School.getSchools();
        for (School s : schools)
        {
            schoolComboBox.addItem(s);
        }
    }

    /**
     * Resets all the input fields to allow for a new spell to be created.
     */
    private void resetInputFields()
    {
        castingTimeTextField.setText("");
        classAvailabilityListModel = new DefaultListModel<>();
        classAvailabilityJList.setModel(classAvailabilityListModel);
        durationTextField.setText("");
        focusCheckBox.setSelected(false);
        gpCheckBox.setSelected(false);
        gpTextField.setText("");
        nameTextField.setText("");
        savingThrowTextField.setText("");
        schoolComboBox.setSelectedIndex(0);
        somaticCheckBox.setSelected(false);
        descriptionTextArea.setText("");
        resistanceTextField.setText("");
        targetTextField.setText("");
        verbalCheckBox.setSelected(false);
        xpCheckBox.setSelected(false);
        xpTextField.setText("");
    }

    /**
     * Loads the information from the passed spell.
     *
     * @param spell the spell to load information from
     */
    private void loadSpellInformation(Spell spell)
    {
        nameTextField.setText(spell.getName());
        schoolComboBox.setSelectedItem(spell.getSchool().toString());
        verbalCheckBox.setSelected(spell.isVerbal());
        xpCheckBox.setSelected(spell.getExperienceCost() != 0);
        xpTextField.setText("" + spell.getExperienceCost());
        somaticCheckBox.setSelected(spell.isSomatic());
        gpCheckBox.setSelected(spell.getGoldCost() != 0);
        gpTextField.setText("" + spell.getGoldCost());
        focusCheckBox.setSelected(spell.isFocus());
        //Add class availability information back in
        HashMap<String, Integer> spellAvailablity = spell.getClassAvailability();
        Set<String> keySet = spellAvailablity.keySet();
        for (String s : keySet)
        {
            String className = s;
            int levelAvailable = spellAvailablity.get(s);
            classAvailabilityListModel.addElement(new ClassAvailability(className, levelAvailable));
        }
        descriptionTextArea.setText(spell.getDescription());
        castingTimeTextField.setText(spell.getCastingTime());
        targetTextField.setText(spell.getTarget());
        durationTextField.setText(spell.getDuration());
        savingThrowTextField.setText(spell.getSavingThrow());
        resistanceTextField.setText(spell.getSpellResistance());
    }
}
