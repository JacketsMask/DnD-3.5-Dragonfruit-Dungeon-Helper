package gui;

import character.IntegerVerifier;
import character.Player;
import character.classes.CharacterClass;
import diceroller.DiceRoll;
import diceroller.DiceRoller;
import enumerations.AbilityScore;
import interfaces.CharacterInfoRetriever;
import java.util.ArrayList;
import javax.swing.JRadioButton;

/**
 *
 * @author Japhez
 */
public class AttackPanel extends javax.swing.JPanel implements CharacterInfoRetriever {

    private Player player;

    public AttackPanel(Player player) {
        initComponents();
        this.player = player;
        modiferButtonGroup.setSelected(strengthRadioButton.getModel(), true);
        meleeRadioButton.doClick();
    }

    @Override
    public void loadInfo() {
        //Prefill BAB
        ArrayList<CharacterClass> characterClasses = player.getClassInfo().getCharacterClasses();
        int BAB = 0;
        for (CharacterClass cc : characterClasses) {
            BAB += cc.getBaseAttackBonus();
        }
        //Calculate number of attacks granted from BAB
        baseAttackBonusTextField.setText("" + BAB);
        if (BAB > 15){
            attacksPerRoundTextField.setText("4");
        }
        else if (BAB > 10){
            attacksPerRoundTextField.setText("3");
        }
        else if (BAB > 5){
            attacksPerRoundTextField.setText("2");
        } else {
            attacksPerRoundTextField.setText("1");
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        weaponTypeRadioButtonGroup = new javax.swing.ButtonGroup();
        modiferButtonGroup = new javax.swing.ButtonGroup();
        handednessButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        attackPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        meleeRadioButton = new javax.swing.JRadioButton();
        penaltyLabel = new javax.swing.JLabel();
        projectileRadioButton = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        rangedPenaltyTextField = new javax.swing.JTextField();
        dexterityRadioButton = new javax.swing.JRadioButton();
        strengthRadioButton = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        noModifierRadioButton = new javax.swing.JRadioButton();
        thrownRadioButton = new javax.swing.JRadioButton();
        maxRangeLabel = new javax.swing.JLabel();
        maxRangeTextField = new javax.swing.JTextField();
        rangeIncrementTextField = new javax.swing.JTextField();
        rangeIncrementLabel = new javax.swing.JLabel();
        targetRangeLabel = new javax.swing.JLabel();
        targetRangeTextField = new javax.swing.JTextField();
        updatePenaltyButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        calculateDamageButton = new javax.swing.JButton();
        numSidesTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        numDiceTextField = new javax.swing.JTextField();
        twoHandRadioButton = new javax.swing.JRadioButton();
        mainHandRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        offHandRadioButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        baseAttackBonusTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        attacksPerRoundTextField = new javax.swing.JTextField();

        weaponTypeRadioButtonGroup.add(meleeRadioButton);
        meleeRadioButton.setText("Melee");
        meleeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weaponTypeSelected(evt);
            }
        });

        penaltyLabel.setText("Ranged Penalty:");

        weaponTypeRadioButtonGroup.add(projectileRadioButton);
        projectileRadioButton.setText("Projectile");
        projectileRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weaponTypeSelected(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Weapon type:");

        rangedPenaltyTextField.setEditable(false);
        rangedPenaltyTextField.setText("0");
        rangedPenaltyTextField.setInputVerifier(new IntegerVerifier(0,999));

        modiferButtonGroup.add(dexterityRadioButton);
        dexterityRadioButton.setText("Dexterity");

        modiferButtonGroup.add(strengthRadioButton);
        strengthRadioButton.setText("Strength");
        strengthRadioButton.setToolTipText("<html>When you hit with a melee or thrown weapon, including a sling, add your Strength modifier to the damage result.<br\\>\nA Strength penalty, but not a bonus, applies on attacks made with a bow that is not a composite bow.<html\\>");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Modifier type:");

        modiferButtonGroup.add(noModifierRadioButton);
        noModifierRadioButton.setText("None");

        weaponTypeRadioButtonGroup.add(thrownRadioButton);
        thrownRadioButton.setText("Thrown");
        thrownRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weaponTypeSelected(evt);
            }
        });

        maxRangeLabel.setText("Max range:");

        maxRangeTextField.setEditable(false);
        maxRangeTextField.setText("0");
        maxRangeTextField.setInputVerifier(new IntegerVerifier(0,999));

        rangeIncrementTextField.setText("0");
        rangeIncrementTextField.setInputVerifier(new IntegerVerifier(0,999));
        rangeIncrementTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rangeInfoChanged(evt);
            }
        });

        rangeIncrementLabel.setText("Range increment:");

        targetRangeLabel.setText("Target range:");

        targetRangeTextField.setText("0");
        targetRangeTextField.setInputVerifier(new IntegerVerifier(0,999));
        targetRangeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rangeInfoChanged(evt);
            }
        });

        updatePenaltyButton.setText("Update penalty");
        updatePenaltyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRangedPenalty(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(meleeRadioButton)
                    .addComponent(jLabel7)
                    .addComponent(thrownRadioButton)
                    .addComponent(projectileRadioButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dexterityRadioButton)
                            .addComponent(strengthRadioButton)
                            .addComponent(jLabel9)
                            .addComponent(noModifierRadioButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(penaltyLabel)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(90, 90, 90)
                                    .addComponent(rangedPenaltyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rangeIncrementLabel)
                                    .addComponent(targetRangeLabel)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(maxRangeLabel)
                                        .addGap(35, 35, 35)
                                        .addComponent(maxRangeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rangeIncrementTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(targetRangeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(18, 18, 18)
                        .addComponent(updatePenaltyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(meleeRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thrownRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(projectileRadioButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(strengthRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dexterityRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noModifierRadioButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rangeIncrementLabel)
                    .addComponent(rangeIncrementTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetRangeLabel)
                    .addComponent(targetRangeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxRangeLabel)
                    .addComponent(maxRangeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(penaltyLabel)
                    .addComponent(rangedPenaltyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatePenaltyButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        calculateDamageButton.setText("Attack!");
        calculateDamageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateDamageButtonActionPerformed(evt);
            }
        });

        numSidesTextField.setText("6");

        jLabel5.setText("d");

        jLabel4.setText("Weapon damage:");

        numDiceTextField.setText("1");

        handednessButtonGroup.add(twoHandRadioButton);
        twoHandRadioButton.setText("Two-handed (not light)");
        twoHandRadioButton.setToolTipText("<html>When you deal damage with a weapon that you are wielding two-handed, you add 1-1/2 times your Strength bonus.<br /> However, you don’t get this higher Strength bonus when using a light weapon with two hands. </html>");

        handednessButtonGroup.add(mainHandRadioButton);
        mainHandRadioButton.setText("Main hand");
        mainHandRadioButton.setToolTipText("When you deal damage with a weapon in your off hand, you add only 1/2 your Strength bonus. ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Handedness:");

        handednessButtonGroup.add(offHandRadioButton);
        offHandRadioButton.setText("Off-hand");
        offHandRadioButton.setToolTipText("When you deal damage with a weapon in your off hand, you add only 1/2 your Strength bonus. ");

        jLabel2.setText("Base attack bonus:");

        baseAttackBonusTextField.setEditable(false);
        baseAttackBonusTextField.setText("0");

        jLabel3.setText("Attacks per round:");

        attacksPerRoundTextField.setText("0");
        attacksPerRoundTextField.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calculateDamageButton)
                    .addComponent(twoHandRadioButton)
                    .addComponent(jLabel1)
                    .addComponent(offHandRadioButton)
                    .addComponent(mainHandRadioButton)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(baseAttackBonusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(numDiceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numSidesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(attacksPerRoundTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mainHandRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(offHandRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(twoHandRadioButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(numDiceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(numSidesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(baseAttackBonusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(attacksPerRoundTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(calculateDamageButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout attackPanelLayout = new javax.swing.GroupLayout(attackPanel);
        attackPanel.setLayout(attackPanelLayout);
        attackPanelLayout.setHorizontalGroup(
            attackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attackPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        attackPanelLayout.setVerticalGroup(
            attackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attackPanelLayout.createSequentialGroup()
                .addGroup(attackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Weapon attack", attackPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private int calculateDamage() {
        System.out.print("Damage roll breakdown: ");
        DiceRoll rollDice = DiceRoller.rollDice(Integer.parseInt(numDiceTextField.getText()), Integer.parseInt(numSidesTextField.getText()));
        int damage = rollDice.getTotalRoll();
        System.out.print("weapon(" + damage + ")");
        //Dex
        if (dexterityRadioButton.isSelected()) {
            int dexMod = player.getAbilityScore().getAbilityScoreModifier(AbilityScore.DEXTERITY);
            damage += dexMod;
            System.out.print(", dex modifier(" + dexMod + ")");
        } //Strength, two handed
        else if (strengthRadioButton.isSelected() && twoHandRadioButton.isSelected()) {
            int strMod = (int) (player.getAbilityScore().getAbilityScoreModifier(AbilityScore.STRENGTH) * 1.5);
            damage += strMod;
            System.out.print(", [two handed] 1.5 str modifier(" + strMod + ")");
            //Strength
        } else if (strengthRadioButton.isSelected() && !mainHandRadioButton.isSelected()) {
            int strMod = (int) (player.getAbilityScore().getAbilityScoreModifier(AbilityScore.STRENGTH));
            damage += strMod;
            System.out.print(", [primary hand] str modifier(" + strMod + ")");
            //Strength off handed 
        } else if (strengthRadioButton.isSelected() && mainHandRadioButton.isSelected()) {
            int strMod = (int) (player.getAbilityScore().getAbilityScoreModifier(AbilityScore.STRENGTH)) / 2;
            damage += strMod;
            System.out.print(", [off-hand] 0.5 str modifier(" + strMod + ")");
        }
        System.out.println("");
        return damage;
    }

    private int calculateAttack() {
        int baseAttackBonus = player.getClassInfo().getInitialClass().getBaseAttackBonus();
        int abilityScoreModifier = 0;
        int sizeModifier = 0;
        int rangePenalty = 0;
        //Ability score modifier
        if (strengthRadioButton.isSelected()) {
            abilityScoreModifier = player.getAbilityScore().getAbilityScoreModifier(AbilityScore.STRENGTH);
        } else if (dexterityRadioButton.isSelected()) {
            abilityScoreModifier = player.getAbilityScore().getAbilityScoreModifier(AbilityScore.DEXTERITY);
        }
        //Size modifier
        sizeModifier = player.getBasicInfo().getRace().getSize().getAttackAndACModifier();
        //Calculate range penalty if ranged
        if (projectileRadioButton.isSelected() || thrownRadioButton.isSelected()) {
            rangePenalty = Integer.parseInt(rangedPenaltyTextField.getText());
        }
        //Calculate and return result
        int rollD20 = DiceRoller.rollD20();
        System.out.println("Attack roll breakdown: d20(" + rollD20 + "), "
                + "base attack bonus(" + baseAttackBonus + "), "
                + "ability score modifier(" + abilityScoreModifier + "), "
                + "size modifier(" + sizeModifier + "), "
                + "range penalty(" + rangePenalty + ")");
        return rollD20 + baseAttackBonus + abilityScoreModifier + sizeModifier - rangePenalty;
    }
    private void calculateDamageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateDamageButtonActionPerformed
        int attack = calculateAttack();
        int damage = calculateDamage();
        System.out.println("Attack roll: " + attack);
        System.out.println("Damage roll: " + damage);
    }//GEN-LAST:event_calculateDamageButtonActionPerformed

    private void weaponTypeSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponTypeSelected
        JRadioButton button = (JRadioButton) evt.getSource();
        //Weapon types that would usually use strength
        if (button.equals(meleeRadioButton) || button.equals(thrownRadioButton)) {
            modiferButtonGroup.setSelected(strengthRadioButton.getModel(), true);
            handednessButtonGroup.setSelected(mainHandRadioButton.getModel(), true);
        } else {
            modiferButtonGroup.setSelected(noModifierRadioButton.getModel(), true);
            handednessButtonGroup.setSelected(twoHandRadioButton.getModel(), true);
        }
        if (button.equals(projectileRadioButton) || button.equals(thrownRadioButton)) {
            maxRangeTextField.setEnabled(true);
            maxRangeLabel.setEnabled(true);
            rangeIncrementTextField.setEnabled(true);
            rangeIncrementLabel.setEnabled(true);
            targetRangeTextField.setEnabled(true);
            targetRangeLabel.setEnabled(true);
            rangedPenaltyTextField.setEnabled(true);
            penaltyLabel.setEnabled(true);
            updatePenaltyButton.setEnabled(true);
        } else {
            maxRangeTextField.setText("0");
            maxRangeTextField.setEnabled(false);
            maxRangeLabel.setEnabled(false);
            rangeIncrementTextField.setText("0");
            rangeIncrementTextField.setEnabled(false);
            rangeIncrementLabel.setEnabled(false);
            targetRangeTextField.setText("0");
            targetRangeTextField.setEnabled(false);
            targetRangeLabel.setEnabled(false);
            rangedPenaltyTextField.setText("0");
            rangedPenaltyTextField.setEnabled(false);
            penaltyLabel.setEnabled(false);
            updatePenaltyButton.setEnabled(false);
        }
    }//GEN-LAST:event_weaponTypeSelected

    private void updateRangedPenalty(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRangedPenalty
        int rangeIncrement = Integer.parseInt(rangeIncrementTextField.getText());
        int targetRange = Integer.parseInt(targetRangeTextField.getText());
        int maxRange = 0;
        //Thrown weapons have max range of 5x range increment
        if (thrownRadioButton.isSelected()) {
            maxRange = rangeIncrement * 5;
        } //Projectile weapons get 10x range increment
        else if (projectileRadioButton.isSelected()) {
            maxRange = rangeIncrement * 10;
        }
        maxRangeTextField.setText("" + maxRange);
        //Target within range increment
        if (targetRange <= rangeIncrement) {
            rangedPenaltyTextField.setText("0");
            //Target outside of range increment, calculate penalty.
        } else {
            rangedPenaltyTextField.setText("-" + targetRange / rangeIncrement);
        }
        updatePenaltyButton.setEnabled(false);
    }//GEN-LAST:event_updateRangedPenalty

    private void rangeInfoChanged(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rangeInfoChanged
        updatePenaltyButton.setEnabled(true);
    }//GEN-LAST:event_rangeInfoChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel attackPanel;
    private javax.swing.JTextField attacksPerRoundTextField;
    private javax.swing.JTextField baseAttackBonusTextField;
    private javax.swing.JButton calculateDamageButton;
    private javax.swing.JRadioButton dexterityRadioButton;
    private javax.swing.ButtonGroup handednessButtonGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton mainHandRadioButton;
    private javax.swing.JLabel maxRangeLabel;
    private javax.swing.JTextField maxRangeTextField;
    private javax.swing.JRadioButton meleeRadioButton;
    private javax.swing.ButtonGroup modiferButtonGroup;
    private javax.swing.JRadioButton noModifierRadioButton;
    private javax.swing.JTextField numDiceTextField;
    private javax.swing.JTextField numSidesTextField;
    private javax.swing.JRadioButton offHandRadioButton;
    private javax.swing.JLabel penaltyLabel;
    private javax.swing.JRadioButton projectileRadioButton;
    private javax.swing.JLabel rangeIncrementLabel;
    private javax.swing.JTextField rangeIncrementTextField;
    private javax.swing.JTextField rangedPenaltyTextField;
    private javax.swing.JRadioButton strengthRadioButton;
    private javax.swing.JLabel targetRangeLabel;
    private javax.swing.JTextField targetRangeTextField;
    private javax.swing.JRadioButton thrownRadioButton;
    private javax.swing.JRadioButton twoHandRadioButton;
    private javax.swing.JButton updatePenaltyButton;
    private javax.swing.ButtonGroup weaponTypeRadioButtonGroup;
    // End of variables declaration//GEN-END:variables
}
